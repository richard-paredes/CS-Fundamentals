Assign2: Due 11:59PM March 26
Due to the Springbreak we have an additional week for this

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

Let's create a guessing game for a single user to play. The game will read a file which has a list of words. For example, the file may contain:

monkey
fruit
banana
apple
cosmopolitan

The program will pick a random word from the file, scramble it (for example, monkey may be scrambled to oekmny, emknoy, etc.), and present to the user the scrambled word.

Then it will ask the user to guess. The user gets partial points for their guess. They get one point for each vowel and two points for each consonant. For example, if the user enters monk (when the selected word is monkey), then they get 7 points. If a letter they enter is not in the word, they don't get any points (they get 0). For example, if they enter mop, they get 0 points. If the spelling of the word is wrong, they get zero points. For example, if they enter ney, even though each letter there is in the selected word, they get 0 points.

The service at the location http://agilec.cs.uh.edu/spell may be used for checking spelling. For example, 

http://agilec.cs.uh.edu/spell?check=right will return true
http://agilec.cs.uh.edu/spell?check=rihgt will return false

The program will present the user with a scrambled word, cycle through asking the user for a guess, print their score, and repeat. It will stop when the user has made the perfect guess, that is, entered the original word (monkey, for example).

Please bring forward the practices, techniques, and tools you have learned so far. This includes: 
Good code quality
Lightweight design
Minimum code
Automated testing                                                         
Code coverage
Build files (I created them for you in assign1, but it's your turn now to practice and learn further)
Change build.sh in your repository to point to assign2 instead of assign1

Total [100]: 100
Program works as expected [20]:
Programm gracefully fails for network failure [10]:
All tests pass [10]:
Test coverage [10]:
Test quality [10]:
Design quality, good separation of concerns [20]:
Code quality [10]:
Random generation handle property to avoid random test failures [10]:
